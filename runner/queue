#!/usr/bin/env bash
# queue -- Command-line interface to manipulating queue entries
# 
# This command works with an SQLite database named 'queue.db', kept under the
# current queue directory.  Following subcommands are available to manipulate
# entries of such database.
# 
# To list all entries in the queue:
# > queue list
# 
# To list only 100 entries starting from the 201st entry:
# > LIMIT=100 OFFSET=201 \
# > queue list
# 
# To list only the runIds of entries:
# > queue list-only runId
# 
# To list only the serial and runIds of entries whose state is RUNNING:
# > queue list-only serial,runIds "state#"=RUNNING
# 
# 
# To add PLANNED entries to the queue:
# > queue plan-more <<EOF
# > x=1 y=foo z=bar
# > x=2 y=bar z=baz
# > EOF
# 
# To replace PLANNED entries of the queue with the ones supplied as input:
# > queue plan <<EOF
# > x=3 y=foo z=baz
# > EOF
# 
# 
# To pick the first PLANNED entry in the queue and mark it as RUNNING:
# > serial=$(queue pick 1 RUNNING)
# > ...
# 
# Similarly, to pick the first 100 PLANNED entries in the queue:
# > queue pick 100 RUNNING |
# > while read serial; do
# >     ...
# > done
# 
# 
# Using the serials of entries, we can selectively
# change the state of particular entries in the queue:
# > queue mark-as DONE    $serial
# > queue mark-as FAILED  98 99
# > queue mark-as PLANNED 100 101 102
# 
# Move some of the PLANNED entries to the front of the queue:
# > queue prioritize 102 104 108 ...
# Or, to the rear:
# > queue postpone   101 103 105 107 ...
# 
# And remove from the queue:
# > queue cancel     100 106 ...
#
# Author: Jaeho Shin <netj@cs.stanford.edu>
# Created: 2013-09-17
set -eu

[ $# -gt 0 ] || usage "$0" ""

SQLITE_BATCHSIZE=256

. find-queue.sh

DB="$_3X_QUEUE_DIR"/queue.db
sqlite3() { command sqlite3 -bail -cmd '.timeout 10000' "$DB" "$@"; }
               sqlite() {                   sqlite3 "$@"; }
be-quiet +5 || sqlite() { tee /dev/stderr | sqlite3 "$@"; }

updateTimestamp() {
    touch "$_3X_QUEUE_DIR"/.queue.db.updated
}

prepare-full-query() {

. sql-vocabs.sh
inputs=$(3x-inputs)
dedup-serials() {
    awk '{
        serial=$0; sub(/^.*#/, "", serial)
        if (seen[serial]++) {
            sub("#" serial, "")
        }
        print
    }'
}

}

# TODO sanitize STATE

Cmd=$1; shift
case $Cmd in
    init|migrate) ;;
    *)
        # initialize or migrate $DB when necessary
        [[ -s "$DB" && "$DB" -nt "$_3X_ROOT"/input ]] ||
            queue init
        [[ -s "$DB" ]] || exit 0  # XXX do not proceed with an empty DB
        ;;
esac
case $Cmd in

    init|migrate)
        prepare-full-query
        [ -n "$inputs" ] || exit 0
        # make sure a proper queue database exists
        sql-create-table() {
            cat <<-EOF
		CREATE TABLE IF NOT EXISTS queue
		( serial   INTEGER PRIMARY KEY ASC AUTOINCREMENT
		, ordinal  INTEGER UNIQUE NOT NULL
		, state    TEXT           DEFAULT 'PLANNED'
		, target   TEXT           DEFAULT NULL
		, runId    TEXT    UNIQUE DEFAULT NULL
		$(
		for varName in $inputs; do
		    echo ", _$varName $(sql-type $varName) DEFAULT NULL"
		done
		for varName; do
		    echo ", x_$varName TEXT DEFAULT NULL"  # XXX defaults to TEXT
		done
		)
		);
		CREATE UNIQUE INDEX IF NOT EXISTS queueOrdering
		ON queue (ordinal ASC);
		EOF
        }
        if [[ ! -s "$DB" ]]; then
            sqlite <<-EOF
		BEGIN TRANSACTION;
		$(sql-create-table)
		COMMIT;
		EOF
        elif [[ "$Cmd" = migrate || "$_3X_ROOT"/input -nt "$DB" ]]; then
            # if $inputs could have changed, migrate queue data
            oldColumns=$(
                sqlite <<<".schema queue" |
                sed -n '/^, _/ { s/^, _//; s/ .*$//; p; }'
                )
            hiddenColumns=$(
                sqlite <<<".schema queue" |
                sed -n '/^, x_/ { s/^, x_//; s/ .*$//; p; }'
                )
            existingColumns="$oldColumns${hiddenColumns:+$'\n'$hiddenColumns}"
            existingColumnsFilter=${existingColumns:- }
            inputsFilter=${inputs:- }
            insertColumns="serial, ordinal, state, target, runId"
            selectColumns=$insertColumns
            unusedColumns=$(grep -vF "$inputsFilter" <<<"$existingColumns") || true
            newColumns=$(   grep -vF "$existingColumnsFilter" <<<"$inputs") || true
            # find current input variables that already exist in the queue
            for varName in $(grep -F "$inputsFilter" <<<"$oldColumns"); do
                insertColumns+=", _$varName"
                selectColumns+=", _$varName"
                msg +4 "$varName: keep showing"
            done
            for varName in $(grep -F "$inputsFilter" <<<"$hiddenColumns"); do
                insertColumns+=", _$varName"
                selectColumns+=", x_$varName"
                msg +4 "$varName: showing"
            done
            # find columns that exist in the queue but will become/stay hidden
            for varName in $(grep -vF "$inputsFilter" <<<"$oldColumns"); do
                insertColumns+=", x_$varName"
                selectColumns+=", _$varName"
                msg +4 "$varName: hiding"
            done
            for varName in $(grep -vF "$inputsFilter" <<<"$hiddenColumns"); do
                insertColumns+=", x_$varName"
                selectColumns+=", x_$varName"
                msg +4 "$varName: keep hiding"
            done
            # run a series of SQL queries to migrate to a new schema
            sqlite <<-EOF
		BEGIN TRANSACTION;
		DROP INDEX IF EXISTS queueOrdering;
		ALTER TABLE queue RENAME TO queue_$$;
		$(sql-create-table $unusedColumns)
		INSERT INTO queue ($insertColumns) SELECT $selectColumns FROM queue_$$;
		DROP TABLE queue_$$;
		$(
		# assign default values for new columns
		for varName in $newColumns; do
		    firstValue=$(3x-inputs -v $varName |
		                    tr '=,' '\n' | head -2 | tail -1)
		    echo "UPDATE queue SET _$varName = $(
		            sql-literal $(sql-type $varName) "$firstValue"
		        ) WHERE state='PLANNED';"
		done
		)
		COMMIT;
		EOF
        fi
        ;;


    list.json|list-only.json|\
    list|list-only)
        prepare-full-query
        case $Cmd in
            list)
                cols="state"
                for varName in $inputs; do
                    cols+=", '$varName=' || _$varName"
                done
                cols+=", '#' || serial"
                cols+=", target"
                cols+=", runId"
                ;;
            list.json)
                cols="state AS 'state#'"
                for varName in $inputs; do
                    cols+=", _$varName AS $varName"
                done
                cols+=", serial AS 'serial#'"
                cols+=", target AS 'target#'"
                cols+=", runId AS 'run#'"
                ;;
            list-only|list-only.json)
                [ $# -gt 0 ] || usage "$0" "One or more COLUMNs must be specifieid"
                cols=$1; shift
                ;;
        esac
        # determine format (tab-separated or JSON)
        format=tabs; case $Cmd in *.json) format=json; esac
        # compile selection expression from arguments
        where=$(compile-where "$@")
        #echo -e "$header"
        sql="SELECT $cols FROM queue $where ORDER BY ordinal"
        sql+=${LIMIT:+ LIMIT $LIMIT}
        sql+=${OFFSET:+ OFFSET $OFFSET}
        case $format in
            json)
                msg +5 "$sql"
                sqlite-json "$DB" "$sql"
                ;;
            *)
                sqlite <<-EOF
		.header OFF
		.mode tabs
		.nullvalue ""
		$sql;
		EOF
	esac
        ;;

    count)
        prepare-full-query
        sqlite <<<"SELECT COUNT(1) FROM queue $(compile-where "$@");"
        ;;

    countByState)
        [ $# -gt 0 ] || set -- PLANNED RUNNING DONE ABORTED FAILED
        {
            echo ".header OFF"
            for state; do
                echo "SELECT 'num$state=' || COUNT(1) FROM queue WHERE state='$state';"
            done
        } | sqlite
        ;;

    plan)
        prepare-full-query
        dedup-serials | {
            echo "BEGIN TRANSACTION;"
            echo "DELETE FROM queue WHERE state='PLANNED';"
            printRecordExpr=$(sql-values-expr "%s, (%s)" $inputs)
            numRecs=0
            while read -r run; do
                if [[ $numRecs -eq 0 ]]; then
                    echo "INSERT OR REPLACE INTO queue ($(printf "_%s,\t" $inputs) serial, ordinal)"
                    echo "VALUES"
                else
                    echo ","
                fi
                let ++numRecs
                # parse line and print corresponding row values
                run=${run#run}
                case $run in
                    *"#"[0-9]*)
                        serial=${run##*#}
                        serial=${serial%%[[:space:]]*}
                        serial="'$serial'" ;;
                    *)  serial=NULL        ;;
                esac
                eval "(
                $run
                $printRecordExpr  '$serial' \
                    '(SELECT COALESCE(MAX(ordinal),0) FROM queue)+$numRecs'
                )"
                if [[ $numRecs -ge $SQLITE_BATCHSIZE ]]; then
                    echo ";"
                    numRecs=0
                fi
            done
            [[ $numRecs -eq 0 ]] || echo ";"
            echo "COMMIT;"
        } | sqlite
        updateTimestamp
        ;;

    plan-more)
        prepare-full-query
        {
            echo "BEGIN TRANSACTION;"
            printRecordExpr=$(sql-values-expr "(%s)" $inputs)
            numRecs=0
            while read -r run; do
                if [[ $numRecs -eq 0 ]]; then
                    echo "INSERT INTO queue ($(printf "_%s,\t" $inputs) ordinal)"
                    echo "VALUES"
                else
                    echo ","
                fi
                let ++numRecs
                # parse line and print corresponding row values
                run=${run#run}
                eval "(
                $run
                $printRecordExpr  \
                    '(SELECT COALESCE(MAX(ordinal),0) FROM queue)+$numRecs'
                )"
                if [[ $numRecs -ge $SQLITE_BATCHSIZE ]]; then
                    echo ";"
                    numRecs=0
                fi
            done
            [[ $numRecs -eq 0 ]] || echo ";"
            echo "COMMIT;"
        } | sqlite
        updateTimestamp
        ;;


    pick)
        count=$1; shift
        newState=$1; shift
        target=${1:-${_3X_TARGET:-}}; shift || true
        runId=${1:-$(new-run-id)}; shift || true
        {
            newStateSQL="'${newState//\'/\'\'}'"
            targetSQL="'${target//\'/\'\'}'"
            echo "BEGIN TRANSACTION;"
            serialsQuery="SELECT serial FROM queue
                          WHERE state='PLANNED'
                          ORDER BY ordinal
                          ${count:+LIMIT $count}"
            echo "$serialsQuery;"
            # assign new runId and target
            runIdSQL="'${runId//\'/\'\'}'"
            echo "UPDATE queue
                  SET state=$newStateSQL
                    , target=$targetSQL
                    , runId=$runIdSQL || '-' || serial
                  WHERE serial IN ($serialsQuery);"
            echo "COMMIT;"
        } | sqlite
        updateTimestamp
        ;;

    mark-as)
        newState=$1; shift
        {
            newStateSQL="'${newState//\'/\'\'}'"
            echo "BEGIN TRANSACTION;"
            # TODO check if a single SQL using "serial IN ( $serials )" would be faster
            for serial; do
                echo "UPDATE queue
                      SET state=$newStateSQL $(
                      # NULLify runId, target, and other columns when newState is PLANNED
                      case $newState in
                          PLANNED) echo ", runId=NULL, target=NULL" ;;
                      esac
                      )
                      WHERE serial=$serial;"
            done
            echo "COMMIT;"
        } | sqlite
        updateTimestamp
        ;;


    duplicate)
        [ $# -gt 0 ] || usage "$0" "No SERIAL given to $Cmd"
        prepare-full-query
        {
            echo "BEGIN TRANSACTION;"
            cols=$(printf "_%s,\t" $inputs)
            # TODO check if a single SQL using "serial IN ( $serials )" would be faster
            for serial; do
                echo "INSERT INTO queue ($cols ordinal)"
                echo "SELECT $cols (SELECT COALESCE(MAX(ordinal),0) FROM queue)+1"
                echo "FROM queue WHERE serial=$serial;"
            done
            echo "COMMIT;"
        } | sqlite
        updateTimestamp
        ;;


    prioritize|postpone)
        [ $# -gt 0 ] || usage "$0" "No SERIAL given to $Cmd"
        prepare-full-query
        {
            serials=$(sql-csv NUM "$@")
            numPLANNED="(SELECT COUNT(1) FROM queue WHERE state='PLANNED')"
            firstOrdinal="(SELECT COALESCE(MAX(ordinal),0) FROM queue WHERE state<>'PLANNED')+1"
            minOrdinal="(SELECT MIN(ordinal) FROM order_$$)"
            maxOrdinal="(SELECT MAX(ordinal) FROM order_$$)"
            echo "BEGIN TRANSACTION;"
            echo "CREATE TEMPORARY TABLE IF NOT EXISTS order_$$
                  (serial INTEGER, ordinal INTEGER);"

            # TODO cache firstOrdinal, numPLANNED
        case $Cmd in
            prioritize)
                # add the prioritized ones to a temporary table
                echo "INSERT INTO order_$$
                        SELECT serial, NULL AS ordinal FROM queue
                        WHERE serial IN ( $serials ) AND state='PLANNED';"
                # assign the minimum ordinal to the first of the prioritized ones
                for serial; do
                    echo "UPDATE order_$$
                          SET ordinal = $firstOrdinal
                          WHERE serial=$serial AND $minOrdinal IS NULL;"
                done
                # and consecutive ordinals from that
                for serial; do
                    echo "UPDATE order_$$
                          SET ordinal = 1 + $maxOrdinal
                          WHERE serial=$serial AND ordinal IS NULL;"
                done
                # append the rest of PLANNED ones to the temporary table
                echo "INSERT OR REPLACE INTO order_$$ (serial, ordinal) 
                        SELECT serial, ordinal + $numPLANNED FROM queue 
                        WHERE serial NOT IN ( $serials ) AND state='PLANNED'
                        ORDER BY ordinal;"
                # assign consecutive ordinals
                echo "UPDATE order_$$
                      SET ordinal = $firstOrdinal 
                                  + (SELECT COUNT(1) FROM order_$$ AS o
                                     WHERE o.ordinal < order_$$.ordinal)
                      WHERE ordinal >= $firstOrdinal + $numPLANNED;"
                ;;

            postpone)
                # add all PLANNED ones except the postponed first to a temporary table
                echo "INSERT INTO order_$$
                        SELECT serial, ordinal FROM queue
                        WHERE serial NOT IN ( $serials ) AND state='PLANNED'
                        ORDER BY ordinal;"
                # assign consecutive ordinals
                echo "UPDATE order_$$
                      SET ordinal = $firstOrdinal
                                  + (SELECT COUNT(1) FROM order_$$ AS o
                                     WHERE o.ordinal < order_$$.ordinal)
                      WHERE ordinal IS NOT NULL;"
                # append the postponed ones to the temporary table
                echo "INSERT OR REPLACE INTO order_$$ (serial, ordinal)
                        SELECT serial, NULL FROM queue
                        WHERE serial IN ( $serials ) AND state='PLANNED';"
                # and assign consecutive ordinals as well
                for serial; do
                    echo "UPDATE order_$$
                          SET ordinal = 1 + $maxOrdinal
                          WHERE serial=$serial AND ordinal IS NULL;"
                done
                ;;
        esac

            # reflect new ordinals back to queue by making a gap first
            echo "UPDATE queue
                  SET ordinal = ordinal + $numPLANNED
                  WHERE state='PLANNED';"
            echo "UPDATE queue
                  SET ordinal = (SELECT o.ordinal FROM order_$$ AS o
                                 WHERE o.serial = queue.serial)
                  WHERE state='PLANNED';"
            echo "DROP TABLE order_$$;"
            echo "COMMIT;"
        } | sqlite
        updateTimestamp
        ;;


    cancel)
        [ $# -gt 0 ] || usage "$0" "No SERIAL given to $Cmd"
        {
            echo "BEGIN TRANSACTION;"
            for serial; do
                echo "DELETE FROM queue WHERE serial=$serial AND state='PLANNED';"
            done
            echo "COMMIT;"
        } | sqlite
        updateTimestamp
        ;;


    *)
        usage "$0" "queue $Command: Unrecognized subcommand"
        ;;

esac
