#!/usr/bin/env bash
# 3x-index -- manage index of experiment results
# 
# > 3x index init
# 
# > 3x index rebuild
# > 3x index update RUN...
# 
# > 3x index query QUERY...
# See compile-where(1) for QUERY.
# 
# > 3x index query.json QUERY...
# Returns result in JSON format.
# 
# Setting LIMIT and OFFSET env variable for query or query.json will limit the
# number of runs in the output.
# 
# > 3x index import-csv CSVFILE PARAM...
# Imports data into the index from given CSVFILE whose fields correspond to
# PARAMs in the given order.
# 
# Index resides at $_3X_ROOT/.3x/index.db, and it is an SQLite database
# mirroring the input and output values for each run.
#
# Author: Jaeho Shin <netj@cs.stanford.edu>
# Created: 2013-03-08
set -eu

[ $# -gt 0 ] || usage "$0" "Specify what to do with the index"

BATCHSIZE=256
# XXX only recent version (>= 3.7.11) of SQLite supports inserting multiple VALUES
# See: http://www.sqlite.org/changes.html#version_3_7_11
v=$(sqlite3 -version); v=${v%% *}
vs=($(IFS=.; set -- $v; echo "$@"))
[[ ${vs[0]} -gt 3 || ${vs[0]} -eq 3 && ( ${vs[1]} -gt 7 || \
    ${vs[1]} -eq 7 && ${vs[2]} -ge 11 ) ]] || BATCHSIZE=1

. find-run-archive.sh

. sql-vocabs.sh

_3X_INDEX="$_3X_ROOT"/.3x/index.db
sqlite3() { command sqlite3 -bail -cmd '.timeout 10000' "$_3X_INDEX" "$@"; }
                     sqlite() {                   sqlite3 "$@"; }
verbosity-isnt +4 || sqlite() { tee /dev/stderr | sqlite3 "$@"; }

inputs=$(3x-inputs)
outputs=$(3x-outputs)
columns="$outputs $inputs"

Cmd=$1; shift
case $Cmd in
    init|migrate)
        ## initialize index if necessary
        sql-create-table() {
            cat <<-EOF
		CREATE TABLE IF NOT EXISTS run
		( id TEXT PRIMARY KEY
		$(
		for varName in $columns; do
		    echo ", _$varName $(sql-type $varName) DEFAULT NULL"
		done
		)
		)
		EOF
        }
        if ! [ -s "$_3X_INDEX" ]; then
            sqlite <<-EOF
                BEGIN TRANSACTION;
		$(sql-create-table);
		COMMIT;
		EOF
        elif [ x"$Cmd" = x"migrate" -o "$_3X_ASSEMBLE" -nt "$_3X_INDEX" ]; then
            # if $inputs and/or $outputs have changed, migrate indexed data
            oldColumns=$(
                sqlite <<<".schema run" |
                sed -n '/^, _/ { s/^, _//; s/ .*$//; p; }'
                )
            insertColumns="id"
            for varName in $columns; do
                grep -qxF "$varName" <<<"$oldColumns" || continue
                insertColumns+=", _$varName"
            done
            selectColumns=$insertColumns
            sqlite <<-EOF
                BEGIN TRANSACTION;
		ALTER TABLE run RENAME TO run_$$;
		$(sql-create-table);
		INSERT INTO run ($insertColumns) SELECT $selectColumns FROM run_$$;
		DROP TABLE run_$$;
		COMMIT;
		EOF
        fi
        ;;

    query)
        cols="id"                               #header="run#"
        for varName in $columns; do
            cols+=", '$varName=' || _$varName"  #header+="\t$varName"
        done
        # compile selection expression from arguments
        where=$(compile-where "$@")
        #echo -e "$header"
        sqlite <<-EOF
	.header OFF
	.mode tabs
	.nullvalue ""
	SELECT $cols FROM run $where;
	EOF
        ;;

    query.json)
        cols="id AS 'run#'"                            #header="run#"
        for varName in $columns; do
            cols+=", _$varName AS $varName"  #header+="\t$varName"
        done
        # compile selection expression from arguments
        where=$(compile-where "$@")
        sql="SELECT $cols FROM run $where"
        sql+=${LIMIT:+ LIMIT $LIMIT}
        sql+=${OFFSET:+ OFFSET $OFFSET}
        # output query result in JSON format
        sqlite-json "$_3X_ROOT/.3x/index.db" "$sql"
        ;;

    update)
        [ -s "$_3X_INDEX" ] || error "No index exists"
        # prepare some vocabularies based on log level
        progress() { :; }
        verbosity-isnt +1 || progress() { msg "Indexing $*..."; }
        be-quiet +3       || set -x
        {
            echo "BEGIN TRANSACTION;"
            # prepare code for generating SQL statements
            printRecordExpr=$(sql-values-expr "'%s'" $columns)
            # scan given RUNs and generate VALUES for SQL INSERT statement
            numRecs=0
            for run; do
                if [[ $numRecs -eq 0 ]]; then
                    echo "INSERT OR REPLACE INTO run"
                    echo "($(printf "_%s,\t" $columns) id) VALUES "
                else
                    echo ","
                fi
                # TODO try to detect malformed input/output values
                (
                    cd "$run"
                    id=$(pwd -P); id=${id#$_3X_ROOT/}
                    progress "$id"
                    eval "source input; source output; $printRecordExpr '$id'"
                ) || true
                let ++numRecs
                if [[ $numRecs -ge $BATCHSIZE ]]; then
                    echo ";"
                    numRecs=0
                fi
            done
            [[ $numRecs -eq 0 ]] || echo ";"
            echo "COMMIT;"
        } | sqlite
        ;;

    rebuild)
        # make sure clean index is initialized
        _3X_LOGLVL=$(($_3X_LOGLVL+1))
        rm -f "$_3X_INDEX"
        3x-index init
        # find all runs and update
        msg "Rebuilding index..."
        find-rundirs "$_3X_ROOT"/run |
        sed 's:/output$::' |
        xargs -- 3x-index update
        ;;

    import-csv)
        CSVFile=$1; shift
        # TODO figure out column names from CSV header
        [[ $# -gt 0 ]] ||
            error "Column NAMEs in the CSVFILE must be specified in the order of appearance"
        types=()
        for fieldName; do
            types+=($(sql-type $fieldName)$(
                    # sanitize CSV data for input fields
                    if [[ -d "$_3X_ROOT"/input/"$fieldName"=/ ]]; then
                        echo ".SANITIZED"
                    fi
                ))
        done
        csvId="run/imported/$(date +%Y%m%d%H%M%S)-$(basename "$CSVFile")"
        mkdir -p "$(dirname "$csvId")"
        cp -f "$CSVFile" "$csvId"
        {
            echo "BEGIN TRANSACTION;"
            convert-csv-to-sql-inserts "$CSVFile" \
                "INSERT OR REPLACE INTO run ($(printf "_%s,\t" "$@") id) VALUES " \
                "$csvId-" "${types[@]}"
            echo "COMMIT;"
        } | sqlite
        ;;

    drop)
        # drop certain runs from the index (e.g., when 3x-archive'ing)
        {
            echo "BEGIN TRANSACTION;"
            echo "DELETE FROM run WHERE id IN ($(sql-csv TEXT "$@"));"
            echo "COMMIT;"
        } | sqlite
        ;;

    *)
        usage "$0" "$Cmd: unknown index command"
        ;;
esac
