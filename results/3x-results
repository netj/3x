#!/usr/bin/env bash
# 3x-results -- enumerate experiment outputs with inputs
# 
# > 3x results [-j] [RUN]... QUERY...
# 
# You can specify from which RUNs you want to enumerate the results.
# Otherwise, results from all runs will be filtered and listed.
# To list all results from the entire set of runs, use:
# 
# > 3x results run
# 
# A QUERY in the form of [NAME[[=|<>|!=]VALUE[,VALUE]... | [<|<=|>=|>]VALUE]]
# can be specified after the BATCH and RUNs, and only the results satisfying
# them will be listed.  Use `3x inputs -v` to see available input variables
# and values.  For the defined output variables, use `3x outputs` to see their
# names and types.
# 
#
# Author: Jaeho Shin <netj@cs.stanford.edu>
# Created: 2012-11-07
set -eu

[ $# -gt 0 ] || usage "$0" "At least a RUN/BATCH directory or input variable must be given"

_3X_ROOT=$(3x-findroot)
export _3X_ROOT

jsonOutput=false
while getopts "j" o; do
    case $o in
        j)
            jsonOutput=true
            ;;
    esac
done
shift $(( $OPTIND - 1 ))

verboseFiltering=
verbosity-isnt +5 || verboseFiltering="bash -x"
verbosity-isnt +4 || set -x

## from command-line, find the queues and runs
runs=()
args=()
for a; do
    p=$(readlink -f "$a")
    p=${p#$_3X_ROOT/}
    case $p in
        run|run/*)
            runs+=("$a")
            ;;
        *) # neither a queue nor run dir
            args+=("$a")
            ;;
    esac
done
# search from all runs if no scope was given
[[ ${#runs[@]} -gt 0 ]] || runs+=("$_3X_ROOT"/run)
[[ ${#args[@]} -eq 0 ]] && set -- || set -- "${args[@]}"
msg +1 "Considering runs under ${runs[*]}"

## normalize rest of the command-line arguments
msg +2 "Normalizing filter $*"
args=($(normalize-inputs -p "$@" | grep -v '=$' || true))
[ ${#args[@]} -eq 0 ] && set -- || set -- "${args[@]}"

## try index first
set -o pipefail
if $jsonOutput; then
    exec 3x-index query.json "$@"
else
    if ! 3x-index query "$@"; then
        ## and fallback to scanning raw data
        msg +2 "Compiling filter $*"
        filter=$(mktemp ${TMPDIR:-/tmp}/3x-results-filter.XXXXXX)
        trap "rm -f $filter" EXIT
        compile-filter "$@" >"$filter"
        chmod +x "$filter"
        if [ $# -gt 0 ]; then
            findPredicate=(-exec $verboseFiltering "$filter" {} \;)
        else
            findPredicate=(-true)
        fi
        ## find matching inputs to get outputs
        msg +1 "Filtering results with $*"
        find-rundirs "${runs[@]}" -- "${findPredicate[@]}" |
        {
            cd "$_3X_ROOT"
            while read -r run; do
                output=$run/output
                input=$run/input
                [ -r "$output" ] || continue
                # TODO support a plain tab separated format
                echo "$run"$'\t'"$(tr '\n' '\t' <"$output")$((sort | tr '\n' '\t') <"$input")"
            done
        }
    fi |
    if [ -t 1 ]; then column -t; else cat; fi
fi
